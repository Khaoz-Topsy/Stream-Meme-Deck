{"version":3,"sources":["constants/mediaType.ts","constants/uploadedMediaDefaults.ts","components/deckItems/uploadedImage.tsx","components/deckItems/uploadedVideo.tsx","components/deckItems/editableText.tsx","components/componentHandler.tsx","components/deckItems.tsx","constants/knownExtensions.ts","helper/extensionHelper.ts","dragAndDropContainer.tsx","app.tsx","index.tsx"],"names":["MediaType","UploadedMediaDefault","width","zIndex","UploadedImage","props","src","URL","createObjectURL","file","onContextMenu","onChildClick","draggable","alt","name","UploadedVideo","autoPlay","loop","muted","type","EditableText","defaultValue","ComponentHandler","uuid","isSelected","clientX","clientY","media","styleObj","top","left","e","preventDefault","setSelectedFile","inner","image","video","text","className","classNames","style","toString","DeckItems","selectedFile","files","selectedFileUuid","map","fileMeta","target","individualGroupable","container","origin","edge","throttleDrag","onDrag","transform","keepRatio","resizable","throttleResize","onResize","height","delta","rotatable","throttleRotate","onRotate","KnownExtensions","getExtension","filename","regexMatch","exec","DragAndDropContainer","useState","isOver","setOver","handleDatatranferItems","dataTransferItems","i","length","dataTransferItem","kind","getAsFile","fileExt","isVideo","includes","addFile","uuidv4","onDragEnter","onDragOver","stopPropagation","onDragLeave","onDrop","dataTransfer","items","onPaste","clipboardData","onDoubleClick","onClick","mouseTrap","require","AppUnTrapped","_deselect","_deleteFile","state","setState","prevState","filter","f","_incZIndex","_alterZIndex","_decZIndex","modifer","index","findIndex","newIndex","alteredItem","slice","this","bindShortcut","unbindShortcut","React","PureComponent","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb9b98b9.chunk.js","sourcesContent":["export enum MediaType {\r\n    image,\r\n    video,\r\n    text\r\n}","export class UploadedMediaDefault {\r\n    static width = 200;\r\n    static zIndex = 1;\r\n}","import React from 'react';\r\n\r\ninterface IProps {\r\n    file: File;\r\n    onChildClick: (e: any) => void;\r\n}\r\n\r\nexport const UploadedImage: React.FC<IProps> = (props: IProps) => {\r\n    return (\r\n        <img\r\n            src={URL.createObjectURL(props.file)}\r\n            onContextMenu={props.onChildClick}\r\n            draggable={false}\r\n            alt={props.file.name}\r\n        />\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\ninterface IProps {\r\n    file: File;\r\n    onChildClick: (e: any) => void;\r\n}\r\n\r\nexport const UploadedVideo: React.FC<IProps> = (props: IProps) => {\r\n    return (\r\n        <video autoPlay loop muted onContextMenu={props.onChildClick}>\r\n            <source src={URL.createObjectURL(props.file)}\r\n                type=\"video/mp4\"\r\n                draggable={false}>\r\n            </source>\r\n        </video>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { EditTextarea } from 'react-edit-text';\r\n\r\ninterface IProps {\r\n    onChildClick: (e: any) => void;\r\n}\r\n\r\nexport const EditableText: React.FC<IProps> = (props: IProps) => {\r\n    return (\r\n        <div onContextMenu={props.onChildClick}>\r\n            <EditTextarea defaultValue=\"Default Text\" />\r\n        </div>\r\n    );\r\n};\r\n","import React, { ReactNode } from 'react';\r\nimport classNames from 'classnames';\r\n\r\nimport { MediaType } from '../constants/mediaType';\r\nimport { UploadedMediaDefault } from '../constants/uploadedMediaDefaults';\r\nimport { IUploadedImageMeta } from '../constracts/uploadedImageMeta';\r\nimport { UploadedImage } from './deckItems/uploadedImage';\r\nimport { UploadedVideo } from './deckItems/uploadedVideo';\r\nimport { EditableText } from './deckItems/editableText';\r\n\r\ninterface IProps extends IUploadedImageMeta {\r\n    isSelected: boolean;\r\n    setSelectedFile: (uuid: string) => void;\r\n}\r\n\r\nexport const ComponentHandler: React.FC<IProps> = (props: IProps) => {\r\n    const { uuid,\r\n        isSelected,\r\n        clientX,\r\n        clientY,\r\n        media,\r\n        zIndex } = props;\r\n\r\n    const styleObj = {\r\n        top: clientY,\r\n        left: clientX,\r\n        width: UploadedMediaDefault.width,\r\n        zIndex: zIndex,\r\n    };\r\n\r\n    const onChildClick = (e: any) => {\r\n        e.preventDefault();\r\n        if (isSelected) props?.setSelectedFile?.('');\r\n        else props?.setSelectedFile?.(uuid);\r\n    }\r\n\r\n    let inner: ReactNode = (<div>Something went wrong</div>);\r\n    if (media === MediaType.image) { inner = (<UploadedImage file={props.file} onChildClick={onChildClick} />); }\r\n    if (media === MediaType.video) { inner = (<UploadedVideo file={props.file} onChildClick={onChildClick} />); }\r\n    if (media === MediaType.text) { inner = (<EditableText onChildClick={onChildClick} />); }\r\n\r\n    return (\r\n        <div\r\n            key={`uploadedImg-${uuid}`}\r\n            className={classNames('uploaded-media', 'noselect', { 'selected': isSelected })}\r\n            style={styleObj}\r\n        >\r\n            {inner}\r\n            <div className=\"meta noselect\">\r\n                {\r\n                    isSelected && <span className=\"abs-top-right noselect\">z-index:&nbsp;{zIndex.toString()}</span>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport Moveable from \"react-moveable\";\r\nimport { MediaType } from '../constants/mediaType';\r\n\r\nimport { IUploadedImageMeta } from '../constracts/uploadedImageMeta';\r\nimport { ComponentHandler } from './componentHandler';\r\n\r\ninterface IProps {\r\n    files: Array<IUploadedImageMeta>\r\n    selectedFileUuid: string;\r\n    setSelectedFile: (uuid: string) => void;\r\n}\r\n\r\nexport const DeckItems: React.FC<IProps> = (props: IProps) => {\r\n\r\n    let selectedFile: IUploadedImageMeta | null = null;\r\n    for (const file of props.files) {\r\n        if (file.uuid === props.selectedFileUuid) {\r\n            selectedFile = { ...file };\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div key=\"container\" className=\"deck-items\">\r\n            {\r\n                props.files.map((fileMeta: IUploadedImageMeta) => {\r\n                    return (\r\n                        <ComponentHandler\r\n                            key={fileMeta.uuid}\r\n                            {...fileMeta}\r\n                            isSelected={fileMeta.uuid === props.selectedFileUuid}\r\n                            setSelectedFile={props.setSelectedFile}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            {\r\n                (selectedFile != null) &&\r\n                <Moveable\r\n                    key={`movable-${selectedFile.uuid}`}\r\n                    target=\".selected\"\r\n                    className=\"noselect\"\r\n                    individualGroupable={true}\r\n                    container={null}\r\n                    origin={false}\r\n                    edge={false}\r\n                    draggable={true}\r\n                    throttleDrag={0}\r\n                    onDrag={({ target, transform }: any) => {\r\n                        target!.style.transform = transform;\r\n                    }}\r\n\r\n                    keepRatio={selectedFile.media !== MediaType.text}\r\n\r\n                    resizable={true}\r\n                    throttleResize={0}\r\n                    onResize={({ target, width, height, delta }: any) => {\r\n                        delta[0] && (target!.style.width = `${width}px`);\r\n                        delta[1] && (target!.style.height = `${height}px`);\r\n                    }}\r\n\r\n                    rotatable={true}\r\n                    throttleRotate={0}\r\n                    onRotate={({ target, transform }: any) => {\r\n                        target!.style.transform = transform;\r\n                    }}\r\n                >\r\n                </Moveable>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","export const KnownExtensions = {\r\n    image: [\r\n        'png',\r\n        'jpg',\r\n        'gif',\r\n    ],\r\n    video: [\r\n        'mp4',\r\n        'mkv',\r\n    ]\r\n}","export const getExtension = (filename: string): string | null => {\r\n    const re = /(?:\\.([^.]+))?$/;\r\n\r\n    try {\r\n        const regexMatch = re.exec(filename);\r\n        if (regexMatch == null) return null;\r\n\r\n        return regexMatch[1];\r\n    } catch {\r\n        return null;\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { MediaType } from './constants/mediaType';\r\nimport { UploadedMediaDefault } from './constants/uploadedMediaDefaults';\r\nimport { KnownExtensions } from './constants/knownExtensions';\r\nimport { IUploadedImageMeta } from './constracts/uploadedImageMeta';\r\nimport { getExtension } from './helper/extensionHelper';\r\nimport classNames from 'classnames';\r\n\r\ninterface IProps {\r\n    onClick: () => void;\r\n    addFile: (file: IUploadedImageMeta) => void;\r\n}\r\n\r\nexport const DragAndDropContainer: React.FC<IProps> = (props: IProps) => {\r\n    const [isOver, setOver] = useState(false);\r\n\r\n    const handleDragOver = (e: any) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    };\r\n    const handleDrop = (e: any) => {\r\n        e.preventDefault();\r\n        if (e.dataTransfer.items) {\r\n            handleDatatranferItems(e.dataTransfer.items, e.clientX, e.clientY);\r\n        }\r\n        setOver(false);\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handlePaste = (e: any) => {\r\n        e.preventDefault();\r\n\r\n        const isValid = e.clipboardData &&\r\n            e.clipboardData.files &&\r\n            e.clipboardData.files.length;\r\n\r\n        if (!isValid) { return; }\r\n\r\n        if (e.clipboardData.files) {\r\n            handleDatatranferItems(e.clipboardData.files, 250, 250);\r\n        }\r\n\r\n        e.stopPropagation();\r\n    };\r\n\r\n    const handleDoubleClick = () => {\r\n        props.addFile({\r\n            file: ({} as any),\r\n            media: MediaType.text,\r\n            uuid: uuidv4(),\r\n            clientX: 250,\r\n            clientY: 250,\r\n            zIndex: UploadedMediaDefault.zIndex,\r\n        });\r\n    };\r\n\r\n    const handleDatatranferItems = (dataTransferItems: any[], clientX: number, clientY: number) => {\r\n        for (let i = 0; i < dataTransferItems.length; i++) {\r\n            const dataTransferItem = dataTransferItems[i];\r\n\r\n            let file = dataTransferItem;\r\n            if (dataTransferItem.kind === 'file') {\r\n                file = dataTransferItem.getAsFile();\r\n            }\r\n\r\n            const fileExt = getExtension(file.name);\r\n            let isVideo = false;\r\n            if (fileExt != null) isVideo = KnownExtensions.video.includes(fileExt);\r\n\r\n            props.addFile({\r\n                file,\r\n                media: isVideo ? MediaType.video : MediaType.image,\r\n                uuid: uuidv4(),\r\n                clientX,\r\n                clientY,\r\n                zIndex: UploadedMediaDefault.zIndex,\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={classNames('drag-drop-zone', { 'drag-is-over': isOver })}\r\n            onDragEnter={() => setOver(true)}\r\n            onDragOver={handleDragOver}\r\n            onDragLeave={() => setOver(false)}\r\n            onDrop={handleDrop}\r\n            onPaste={handlePaste}\r\n            onDoubleClick={handleDoubleClick}\r\n            onClick={props.onClick}\r\n        >\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\n\nimport { IUploadedImageMeta } from './constracts/uploadedImageMeta';\nimport { DeckItems } from './components/deckItems';\n\nimport { DragAndDropContainer } from './dragAndDropContainer';\n\nconst mouseTrap = require('react-mousetrap');\n\ninterface IProps {\n  bindShortcut: any;\n  unbindShortcut: any;\n}\ninterface IState {\n  files: Array<IUploadedImageMeta>\n  selectedFileUuid: string;\n}\n\nclass AppUnTrapped extends React.PureComponent<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      files: [],\n      selectedFileUuid: '',\n    }\n  }\n\n  componentWillMount() {\n    this.props.bindShortcut('esc', this._deselect);\n    this.props.bindShortcut('del', this._deleteFile);\n\n    this.props.bindShortcut('up', this._incZIndex);\n    this.props.bindShortcut('down', this._decZIndex);\n  }\n\n  componentWillUnmount() {\n    this.props.unbindShortcut('esc', this._deselect);\n    this.props.unbindShortcut('del', this._deleteFile);\n\n    this.props.unbindShortcut('up', this._incZIndex);\n    this.props.unbindShortcut('down', this._decZIndex);\n  }\n\n  _deselect = () => this.setSelectedFile('');\n  _deleteFile = () => {\n    if (this.state.selectedFileUuid == null || this.state.selectedFileUuid.length < 10) return;\n    this.setState((prevState: IState) => {\n      return {\n        files: [...prevState.files.filter(f => f.uuid !== prevState.selectedFileUuid)],\n        selectedFileUuid: '',\n      }\n    })\n  }\n  _incZIndex = () => this._alterZIndex(1);\n  _decZIndex = () => this._alterZIndex(-1);\n  _alterZIndex = (modifer: number) => {\n    if (this.state.selectedFileUuid == null || this.state.selectedFileUuid.length < 10) return;\n    this.setState((prevState: IState) => {\n      const index = prevState.files.findIndex(f => f.uuid === prevState.selectedFileUuid);\n      if (index == null) return null;\n\n      let newIndex = prevState.files[index].zIndex + modifer;\n      if (newIndex <= 0) newIndex = 1;\n\n      const alteredItem = { ...prevState.files[index], zIndex: newIndex };\n      const newFiles = [\n        ...prevState.files.slice(0, index),\n        alteredItem,\n        ...prevState.files.slice(index + 1)\n      ]\n      return {\n        files: newFiles,\n      }\n    })\n  }\n\n  addFile = (file: IUploadedImageMeta) => {\n    this.setState((prevState: IState) => {\n      return {\n        files: [...prevState.files, file],\n      }\n    })\n  }\n\n  setSelectedFile = (uuid: string) => {\n    this.setState({ selectedFileUuid: uuid });\n  }\n\n  render() {\n    const { files, selectedFileUuid } = this.state;\n    return (\n      <>\n        <DragAndDropContainer addFile={this.addFile} onClick={() => this.setState({ selectedFileUuid: '' })} />\n        <DeckItems files={files} selectedFileUuid={selectedFileUuid} setSelectedFile={this.setSelectedFile} />\n      </>\n    );\n  }\n}\n\nexport const App = mouseTrap.mouseTrap(AppUnTrapped);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './app';\n\nimport './scss/index.scss';\nimport 'react-edit-text/dist/index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('deck')\n);\n"],"sourceRoot":""}